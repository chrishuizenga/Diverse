<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>testMoveDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseX=self.x;
mouseY=self.y;

attack = false;
targetable = true;

targeting=false;

click_id = 0;
c_click_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;
depth=-y;

if (attack == false)
{
    mouseDistance = point_distance(x,y,mouseX,mouseY);
    move_towards_point(mouseX,mouseY, min(4, mouseDistance));
}
else if(attack == true) &amp;&amp; (objController.click_id != 0)
{
    mouseDistance = point_distance(x,y,objController.target_x,objController.target_y);
    move_towards_point(objController.target_x,objController.target_y, min(4, mouseDistance));
}
else
{
    move_towards_point(x,y,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var coll_obj = collision_circle(mouse_x,mouse_y,32,all,0,1); //detect collision at mouse_x and mouse_y position

if (coll_obj != noone) //if colliding with any obj
{
var targetable = coll_obj.targetable; //gets the object name that is colliding at mouse_x, mouse_y position
}
if (!position_meeting(mouse_x, mouse_y, all)) || (targetable == false)
{
    mouseX=mouse_x; //Store location temporarily
    mouseY=mouse_y;
    with (objMouseMove)
    {
     instance_destroy();
    }
    instance_create(mouse_x,mouse_y,objMouseMove);
    attack = false;
    targeting=false;
}
else if (targetable==true)
{
    if (targeting == true)
    {
        if(objController.click_id == instance_position(mouse_x, mouse_y, all))
        {
            attack = true;
        }
        with (objMouseMove)
        {
         instance_destroy();
        }
    }
}
    

/* This should get the object id of whatever we click on as long as it is targetable*/
var click_id = instance_position(mouse_x, mouse_y, all);
if (click_id.targetable = true){
    objController.click_id = click_id;
    targeting=true;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y);

var strName = object_get_name(object_index)

draw_set_halign(fa_center);
if (objController.click_id = self){
    draw_set_color(c_white);
    }
else if (objController.click_id != self) {
    draw_set_color(c_teal);
    }
draw_text(self.x,self.y-32,strName);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
