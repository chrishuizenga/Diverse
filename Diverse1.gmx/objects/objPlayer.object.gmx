<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>testMoveDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Declare mouse variables
mouseX=self.x;
mouseY=self.y;
//Declare Attack-related variables
attack = false;
targetable = true;
targeting=false;
targetself=false;
other_targetable=false;
click_id = 0;
c_click_id = 0; // Current click id

//Declare Control Variables
attackmode = false //Peace mode: false - Attack mode: true
run = true; //walk: false - run: true
sprint = false;

//Character Sheet
name = "Ikohn";
level = 1;
hp = 10; //Current Health
m_hp = 10; //Max Health

//Character Sheet (Continued)
range = 20; //Melee: 32, Range: TBD
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;
depth=-y;
// AttackMode / PeaceMode
if(keyboard_check_pressed(ord('Q')))
{
    if(attackmode)
    {
        attackmode = false;
        attack = false;
    }
    else
    {
        attackmode = true;
        if(objController.click_id != 0)
        {
            attack = true;
        }
    }
}


//MOVEMENT
if (attack == false)
{
    mouseDistance = point_distance(x,y,mouseX,mouseY);
    move_towards_point(mouseX,mouseY, min(4, mouseDistance));
}
else if(attack == true) &amp;&amp; (objController.click_id != 0) &amp;&amp; (targetself=false)
{
    if(distance_to_object(objController.click_id) &gt; range)
    {
        mouseDistance = point_distance(x,y,objController.target_x,objController.target_y);
        move_towards_point(objController.target_x,objController.target_y, min(4, mouseDistance));
        with (objMouseMove)
        {
            instance_destroy();
        }
        mouseX = x;
        mouseY = y;
    }
    if(distance_to_object(objController.click_id) &lt; range)
    {
        move_towards_point(x,y,0);
        mouseX = x;
        mouseY = y;
    }
}
else
{
    move_towards_point(x,y,0);
    mouseX = x;
    mouseY = y;
    with (objMouseMove)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* This should get the object id of whatever we click on as long as it is targetable*/
click_id = instance_position(mouse_x, mouse_y, all);
if (click_id != noone)
{
    if (click_id.targetable = true)
    {
        objController.click_id = click_id;
    }
}
coll_obj = instance_position(mouse_x, mouse_y, all); //detect collision at mouse_x and mouse_y position
if (coll_obj != noone) //if colliding with any obj
{
    if(coll_obj != self)
    {
        other_targetable = coll_obj.targetable; //gets the object name that is colliding at mouse_x, mouse_y position
        targetself = false;
    }
    else
    {
        other_targetable = true;
        targetself = true;
        attack = false;
    }
}
if (!position_meeting(mouse_x, mouse_y, all)) || (other_targetable == false)
{
    mouseX=mouse_x; //Store location temporarily
    mouseY=mouse_y;
    with (objMouseMove) //Destroy objMouseMove
    {
     instance_destroy();
    }
    instance_create(mouse_x,mouse_y,objMouseMove);
    attack = false;
}
else if (other_targetable==true)
{  
    if (c_click_id == click_id) &amp;&amp; (targeting == true) &amp;&amp; (c_click_id != 0)
    {
        if(click_id != self)
        {
            attackmode = true;
            attack = true;
        }
        else
        {
            attack = false;
        }
    }
    else
    {
        targeting=true;
        c_click_id = instance_position(mouse_x, mouse_y, all);
    }
    if (attackmode == true)
    {
        attack = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y);

//strName = object_get_name(object_index)

draw_set_halign(fa_center);
if (objController.click_id = self){
    draw_set_color(c_white);
    }
else if (objController.click_id != self) {
    col = make_color_rgb(0,192,192);
    draw_set_color(col);
    }
draw_text(self.x,self.y-32,name);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
