<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>testMoveDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Declare mouse variables
mouseX=self.x;
mouseY=self.y;
cur_x = x;
cur_y = y;

//Declare Attack-related variables
following = false;
attacking = false;
targetable = true;
targeting=false;
targetself=false;
other_targetable=false;
click_id = 0;
c_click_id = 0; // Current click id
enemy = false;
swingtimer = 0;
dead=false;

//Declare Control Variables
attackmode = false //Peace mode: false - Attack mode: true
run = true; //walk: false - run: true
sprint = false;

//Character Sheet
name = "Ikohn";
level = 1;
hp = 10; //Current Health
m_hp = 10; //Max Health

//Character Sheet (Continued)
range = 20; //Melee: 32, Range: TBD
attackspeed = 1;

//Spawn facing random direction
direction = random(360);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_speed=0;
depth=-y;

// AttackMode / PeaceMode
if(keyboard_check_pressed(ord('Q'))) //Press Q
{
    if(attackmode)          //If you're already in attack mode
    {
        attackmode = false; //Turn off attack mode
        following = false;
    }
    else
    {
        if(objController.click_id != 0) //if you're targeting something
        {
            attackmode = true;
            if(objController.click_id.enemy == true)
            {
                following = true; //Only starts following if enemy is selected
            }
        }
    }
}


//MOVEMENT
if (following == false) //Click on ground
{
    mouseDistance = point_distance(x,y,mouseX,mouseY);
    move_towards_point(mouseX,mouseY, min(4, mouseDistance)); //min(speed, mouseDistance)
}
else if(following == true) &amp;&amp; (objController.click_id != 0) &amp;&amp; (targetself=false) //Click on something thats not you
{
    if(distance_to_object(objController.click_id) &gt; range) //Check to see if you're not in range
    {
        mouseDistance = point_distance(x,y,objController.target_x,objController.target_y);
        move_towards_point(objController.target_x,objController.target_y, min(4, mouseDistance));
        with (objMouseMove)
        {
            instance_destroy();
        }
        mouseX = x;
        mouseY = y;
        attacking = false;
    }
    if(distance_to_object(objController.click_id) &lt; range) //This is when you're in range
                                                            //NOTE: When we add long range auto-attacks (Bows/Guns) this will have to be edited.
    {
        if(objController.click_id.enemy==true) //Is it an enemy?
        {
            if(objController.click_id.dead == false) //Yes, Is it alive?
            {
                attacking = true; //Yes: attack
            }
            else
            {
                following = false; //No: don't attack, stop following it.
            }
        }
        else
        {
            attacking = false; //No, its not an enemy. Don't attack.
        }
        move_towards_point(x,y,0);//Stops moving when you are in range.
        mouseX = x;
        mouseY = y;
    }
}
else //Not moving (Targeting self, walked up to dead body, etc)
{
    move_towards_point(x,y,0);
    mouseX = x;
    mouseY = y;
    with (objMouseMove)
    {
        instance_destroy();
    }
}
//ATTACK CODE (Temporary)
//NOTE: Will probably change when we add more stats and stuff
if (attacking == true) &amp;&amp; (objController.click_id.enemy == true) &amp;&amp; (distance_to_object(objController.click_id) &lt; range) &amp;&amp; (attackmode == true)
{
    swingtimer += attackspeed;
    if (swingtimer &gt;= 50)
    {
        objController.click_id.hp--;
        swingtimer = 0;
    }
    if(objController.click_id.dead = true)
    {
        following = false;
        attackmode = false;
        objController.click_id = 0;
        click_id = 0;
        attacking = false;
    }
}

//if the player is moving this should hopefully move to the next frame of animation.
//if (cur_x != x || cur_y != y){
//    image_index ++;
//    cur_x = x;
//    cur_y = y;
//    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* This should get the object id of whatever we click on as long as it is targetable*/
click_id = instance_position(mouse_x, mouse_y, all);
if (click_id != noone)
{
    if (click_id.targetable = true)
    {
        objController.click_id = click_id;
    }
}

coll_obj = instance_position(mouse_x, mouse_y, all); //detect collision at mouse_x and mouse_y position
if (coll_obj != noone) //if colliding with any obj
{
    if(coll_obj != self) //Clicked not your self
    {
        other_targetable = coll_obj.targetable; //gets the object name that is colliding at mouse_x, mouse_y position
        targetself = false;
    }
    else //Clicked self
    {
        other_targetable = true;
        targetself = true;
        following = false;
    }
}
if (!position_meeting(mouse_x, mouse_y, all)) || (other_targetable == false) //Clicked on ground
{
    mouseX=mouse_x; //Store location temporarily
    mouseY=mouse_y;
    with (objMouseMove) //Destroy old mouse move
    {
     instance_destroy();
    }
    instance_create(mouse_x,mouse_y,objMouseMove); //Create new
    following = false;
}
else if (other_targetable==true) //Clicked on someting you can target
{  
    if (c_click_id == objController.click_id) &amp;&amp; (targeting == true) &amp;&amp; (c_click_id != 0) //If you clicked on it a second time
    {
        if(objController.click_id != self) //Double clicked, making sure its not yourself!
        {
            if(objController.click_id.enemy = true) &amp;&amp; (objController.click_id.dead == false) //Is it an enemy? Is it alive?
            {
                attackmode = true; //YES. YES. Kill!
            }
            following = true; //YES. No. Walk up to it.
        }
        else
        {
            following = false; //Double clicked self.
        }
    }
    else //Clicked for first time
    {
        targeting=true;
        c_click_id = instance_position(mouse_x, mouse_y, all);
    }
    if (attackmode == true) //Already ready to attack, just bypass the double clicking and begin attack
    {            
        if(objController.click_id.enemy = true)
        {
            following = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>col = make_color_rgb(0,192,192); // Teal Color
scr_name(col);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animation of character direction
if (direction &lt; 45 || direction &gt; 315 ){
    draw_sprite(testMoveRight,image_index,x,y);
    }
if (direction &gt;= 45 &amp;&amp; direction &lt; 135){
    draw_sprite(testMoveUp, image_index,x,y);
    }
if (direction &gt;= 125 &amp;&amp; direction &lt; 225){
    draw_sprite(testMoveLeft, image_index,x,y);
    }
if (direction &gt;= 225 &amp;&amp; direction &lt;315){
    draw_sprite(testMoveDown, image_index,x,y);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
