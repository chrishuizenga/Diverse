<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_regionPixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetable=false;
isUI=true;

width = 300;
height = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physical Space

w_correct = (display_get_gui_width() / view_wview);
h_correct = (display_get_gui_height() / view_hview);
//For Physical Space
posx1 = view_xview+(view_wview/2) - width/(2*w_correct); //The X position, relative to the view, and scaled to the current window size.
posy1 = view_yview+(view_hview/2) - height/(2*h_correct); //The Y position, relative to the view, and scaled to the current window size.
posx2 = view_xview+(view_wview/2) + width/(2*w_correct)-1;
posy2 = view_yview+(view_hview/2) + height/(2*h_correct)-1;

//For UI space
x1 = (display_get_gui_width()-width)/2;
y1 = (display_get_gui_height()-height)/2;
x2 = (display_get_gui_width()+width)/2;
y2 = (display_get_gui_height()+height)/2;

//Move to Menu position
x = posx1;
y = posy1;
image_xscale = (posx2-posx1)+1;
image_yscale = (posy2-posy1)+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu


//Draw Background
draw_set_alpha(.5);
draw_set_color(c_black);
draw_rectangle(
    x1,
    y1,
    x2,
    y2,
    0
    );
//DRAW BORDER
//draw_sprite_stretched(sprite_index,subimage,x,y,width,height);
draw_set_alpha(1);
//Top
draw_sprite_stretched(
    spr_windowT,
    0,
    x1+8,
    y1,
    width-16,
    16
    );
//Bottom
draw_sprite_stretched(
    spr_windowB,
    0,
    x1+8,
    y1+height-15, //Bottom and Right sides 1 pixel too long
    width-16,
    16
    );
//Left
draw_sprite_stretched(
    spr_windowL,
    0,
    x1,
    y1+8,
    16,
    height - 16
    );
//Right
draw_sprite_stretched(
    spr_windowR,
    0,
    x1+width-15, //Bottom and Right sides 1 pixel too long
    y1+8,
    16,
    height - 16
    );
//DRAW CORNERS
draw_sprite(spr_windowTL,0,x1,y1);
draw_sprite(spr_windowTR,0,x1+width-15,y1); //Bottom and Right sides 1 pixel too long
draw_sprite(spr_windowBR,0,x1+width-15,y1+height-15); //Bottom and Right sides 1 pixel too long
draw_sprite(spr_windowBL,0,x1,y1+height-15); //Bottom and Right sides 1 pixel too long

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0);
draw_set_color(c_white);
//draw_rectangle(posx1,posy1,posx2,posy2,0)
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(self)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
